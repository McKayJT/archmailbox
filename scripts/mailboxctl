#!/bin/sh

# debugging cruft
# set -x

AVAIL_MODULES="dovecot rspamd smtpd dkim acme"
MODULES="$AVAIL_MODULES"
TEMP_DIR=""
FILENAME="backup.tar.xz.encpipe"

# _die message displayusage
_die() {
  echo "$1" 1>&2
  if [ -n "$2" ]; then
    _usage 1>&2
  fi
  exit 1
}

_cleanup() {
  if [ -d "$TEMP_DIR" ]; then
    rm -rf "$TEMP_DIR"
  fi
  stty echo
}

_create_temp_dir() {
  TEMP_DIR=$(mktemp -d)
  FILE_LIST="$TEMP_DIR/backup.files"
  chmod 700 "$TEMP_DIR"
  trap _cleanup 0
  trap "exit 2" 1 2 3 15
}

# _check_is_root yes/no
_check_is_root() {
  if [ "$1" = 'yes' ]; then
    if [ "$(whoami)" != 'root' ]; then
      _die "This command must be run as root"
    fi
  else
    if [ "$(whoami)" = 'root' ]; then
      _die "This command must not be run as root"
    fi
  fi
}

_check_backup() {
  if [ ! -d "$3" ]; then
    _die "module $1 not found in backup"
  fi
}

_mod_cfg() {
  case $1 in
    dovecot) echo 'dovecot' '/etc' 'dovecot' ;;
    rspamd) echo 'rspamd' '/etc/rspamd' 'local.d' ;;
    smtpd) echo 'smtpd' '/etc' 'smtpd' ;;
    dkim) echo 'dkim' '/var/lib/rspamd' 'dkim' ;;
    acme) echo 'acme' '/var/lib' 'acme' ;;
    *) _die 'invalid module' ;;
  esac
}

# _add_files module parent_directory backup_directory
_add_files() {
  cd "$2" || _die "Could not cd to $2"
  {
    find . -path "./$3" -type d -print0
    find . -path "./$3/*" -type d -print0
    find . -path "./$3/*" -print0
  } >>"$FILE_LIST.$1"
  cd "$OLDPWD" || _die "Could not cd to $OLDPWD"
}

# _get_password [suggest password: yes/no]
_get_password() {
  if [ "$1" = 'yes' ] && [ -z "$PASSWORD" ]; then
    echo "Password Suggestion: $(encpipe -G)"
  fi
  while [ -z "$PASSWORD" ]; do
    printf 'Enter password: '
    stty -echo
    read -r _pw1
    stty echo
    printf '\nConfirm password: '
    stty -echo
    read -r _pw2
    stty echo
    printf '\n'
    if [ "$_pw1" = "$_pw2" ]; then
      PASSWORD="$_pw1"
    else
      echo "Passwords do not match"
    fi
  done
}

_add_tar_flags() {
  _tar_flags="$_tar_flags -C $2 -T $FILE_LIST.$1"
}

_restore_module() {
  echo "restoring $1"
  mv "$3" "$2" || _die "Cannot restore $1"
}

_backup_modules() {
  _module_list=$1
  _check_is_root 'yes'
  if [ -r "$FILENAME" ]; then
    _die "$FILENAME already exists!"
  fi
  for module in $_module_list; do
    # shellcheck disable=SC2046
    _add_files $(_mod_cfg "$module")
  done

  _tar_flags=""
  for module in $_module_list; do
    # shellcheck disable=SC2046
    _add_tar_flags $(_mod_cfg "$module")
  done
  _get_password yes
  echo "$PASSWORD" >"$TEMP_DIR/password"
  # shellcheck disable=SC2046
  eval tar --null --acls --xattrs $_tar_flags -cf - |
    xz -z -c -9 - |
    encpipe -e -P "$TEMP_DIR/password" -o "$FILENAME"
}

_restore_modules() {
  _module_list=$1
  _check_is_root 'yes'

  cat <<EOF
     ********WARNING*********
This operation will delete all the
files in the current configuration
for modules:
$_module_list

Type 'delete my files' to continue
     ********WARNING*********
EOF
  read -r _confirmation
  if [ "$_confirmation" != 'delete my files' ]; then
    echo "aborting"
    exit 0
  fi
  if [ ! -r "$FILENAME" ]; then
    _die "Cannot read backup file $FILENAME"
  fi
  _real_file="$(realpath "$FILENAME")"

  _get_password no
  echo "$PASSWORD" >"$TEMP_DIR/password"
  cd "$TEMP_DIR" || _die "Cannot cd to $TEMP_DIR"
  encpipe -d -P "$TEMP_DIR/password" -i "$_real_file" |
    xz -d -c - |
    tar --acls --xattrs -xf -

  # check that we have all the modules in the backup
  # before we start overwriting things
  for module in $_module_list; do
    # shellcheck disable=SC2046
    _check_backup $(_mod_cfg "$module")
  done
  for module in $_module_list; do
    # shellcheck disable=SC2046
    _restore_module $(_mod_cfg "$module")
  done
}

_gen_rsa_dkim_key() {
  openssl genrsa -out "$TEMP_DIR/rsa.priv" ||
    _die "failed to generate rsa private key"
  openssl rsa -in "$TEMP_DIR/rsa.priv" -pubout -out "$TEMP_DIR/rsa.pub" ||
    _die "failed to make rsa public key"
  _rsa_private="$(cat "$TEMP_DIR/rsa.priv")"
  _rsa_public="$(cat "$TEMP_DIR/rsa.pub")"
  _rsa_public="$(echo "$_rsa_public" | sed '/^--.*/d')"
  _rsa_public="$(echo "$_rsa_public" | tr -d '\n')"
}

# _output_dkim_config domain [type selector privkey pubkey]*
_output_dkim_config() {
  _domain=$1
  shift
  cat >"$_output_dir/$_domain.conf" <<EOF
$_domain {
    selectors [
EOF

  while [ $# -gt 3 ]; do
    _type=$1
    _selector=$2
    _privkey=$3
    _pubkey=$4
    echo "$_privkey" >"$_output_dir/$_domain.$_selector.key"

    cat >>"$_output_dir/$_domain.conf" <<EOF
     {
         selector = "$_selector";
         path = "/var/lib/rspamd/dkim/$_domain.$_selector.key";
     },
EOF
    cat >>"$_output_dir/$_domain.dns" <<EOF
$_selector._domainkey.$_domain. IN TXT (
  "v=DKIM1; k=$_type; p=$_pubkey"
)
EOF
    shift 4
  done

  cat >>"$_output_dir/$_domain.conf" <<EOF
    ]
}
EOF
}

_generate_dkim() {
  _check_is_root no
  echo 'Generating DKIM keys'
  while [ -z "$DOMAIN" ]; do
    printf 'Enter domain: '
    read -r DOMAIN
  done
  while [ -z "$_rsa_selector" ]; do
    printf 'Enter selector for rsa: '
    read -r _rsa_selector
  done
  while [ -z "$_eddsa_selector" ]; do
    printf 'Enter selector for eddsa: '
    read -r _eddsa_selector
  done
  _output_dir="dkim_$DOMAIN"
  if [ -d "$_output_dir" ]; then
    _die "output directory $_output_dir already exists"
  fi
  mkdir "$_output_dir" || _die "error creating output directory $_output_dir"
  _gen_rsa_dkim_key

  _eddsa_keys="$(treesutil -s)"
  _eddsa_private="$(echo "$_eddsa_keys" | cut -d ' ' -f1 -)"
  _eddsa_public="$(echo "$_eddsa_keys" | cut -d ' ' -f2 -)"

  _output_dkim_config "$DOMAIN" \
    'ed25519' "$_eddsa_selector" "$_eddsa_private" "$_eddsa_public" \
    'rsa' "$_rsa_selector" "$_rsa_private" "$_rsa_public"

  _script="$(basename "$0")"
  cat <<EOF
Your DKIM configuration is saved in $_output_dir
Run:
$_script -d $DOMAIN installdkim
as root to install

Be sure to add the entries from
$_output_dir/$DOMAIN.dns
with your dns provider
EOF
}

_install_dkim() {
  _check_is_root yes
  echo 'Installing DKIM keys'
  while [ -z "$DOMAIN" ]; do
    printf 'Enter domain: '
    read -r DOMAIN
  done
  if [ -r "/etc/rspamd/local.d/dkim/$DOMAIN.conf" ]; then
    _die "configuration for $DOMAIN already exists"
  fi
  _output_dir="dkim_$DOMAIN"
  if [ ! -d "$_output_dir" ]; then
    _die "output directory $_output_dir does not exist"
  fi
  if [ ! -d "/etc/rspamd/local.d/dkim" ]; then
    mkdir -p "/etc/rspamd/local.d/dkim" ||
      _die "could not create output directory for rspamd configuration"
    chown '_rspamd:_rspamd' '/etc/rspamd/local.d/dkim'
    chmod 644 '/etc/rspamd/local.d/dkim'
  fi
  _files="$(ls "$_output_dir"/*.conf)"
  for _file in $_files; do
    _file="$(basename "$_file")"
    cp "$_output_dir/$_file" '/etc/rspamd/local.d/dkim'
    chown '_rspamd:_rspamd' "/etc/rspamd/local.d/dkim/$_file"
    chmod '644' "/etc/rspamd/local.d/dkim/$_file"
  done
  if [ ! -d '/var/lib/rspamd/dkim' ]; then
    mkdir -p "/var/lib/rspamd/dkim" ||
      _die "could not find or create output directory for rspamd configuration"
    chown '_rspamd:_rspamd' '/var/lib/rspamd/dkim'
    chmod '750' '/var/lib/rspamd/dkim'
  fi
  _files="$(ls "$_output_dir"/*.key)"
  for _file in $_files; do
    _file="$(basename "$_file")"
    cp "$_output_dir/$_file" '/var/lib/rspamd/dkim'
    chown '_rspamd:_rspamd' "/var/lib/rspamd/dkim/$_file"
    chmod '640' "/var/lib/rspamd/dkim/$_file"
  done
}

_gen_acme_certificate() {
  _check_is_root yes

  while [ -z "$DOMAIN" ]; do
    printf 'Enter fully qualified domain: '
    read -r DOMAIN
  done

  while [ -z "$EMAIL" ]; do
    printf "Enter email for Let's Encrypt account: "
    read -r EMAIL
  done

  echo "Setting up Let's Encrypt for domain $DOMAIN with emails going to $EMAIL"
  printf "Are you sure? (type 'yes' to continue) "
  read -r _confirmation
  if [ "$_confirmation" != 'yes' ]; then
    exit 0
  fi

  if [ ! -r '/var/lib/acme/account.conf' ]; then
    echo "Setting up new Let's Encrypt account"
    acme.sh --home /var/lib/acme --register-account --accountemail "$EMAIL" ||
      _die "Could not set up Let's Encrypt account"
  else
    echo "Let's Encrypt account already exists"
    echo "If you wish to update your email run"
    echo "acme.sh --home /var/lib/acme --update-account --accountemail $EMAIL"
  fi

  acme.sh --home /var/lib/acme --alpn --issue -d "$DOMAIN" ||
    _die "Could not issue Let's Encrypt certificate"
  acme.sh --home /var/lib/acme --deploy --deploy-hook mailbox -d "$DOMAIN" ||
    _die "Could not deploy Let's Encrypt certificate"

  echo "Let's Encrypt cerificate generation successful."
  echo "Please backup your configuration now."
}

_deploy_certificate() {
  _check_is_root yes

  if [ ! -r '/var/lib/acme/account.conf' ]; then
    echo "no acme.sh configuration found"
    exit 1
  fi

  acme.sh --home /var/lib/acme --list ||
    _die "failed to generate certificate list"

  while [ -z "$DOMAIN" ]; do
    printf "Which domain to use? "
    read -r DOMAIN
  done

  acme.sh --home /var/lib/acme --deploy --delpoy-hook mailbox -d "$DOMAIN" ||
    _die "Could not deploy certificate"
}

_enable_services() {
  _check_is_root yes
  echo "Starting archmailbox services..."
  if [ ! -r '/etc/smtpd/smtp.sqlite' ]; then
    _die "No OpenSMTPD user configuration generated"
  fi
  if [ ! -s '/etc/acme/fullchain.cer' ] ||
     [ ! -s '/etc/acme/private.key' ]; then
    _die "Let's encrypt certificates not generated"
  fi
  if [ -z "$(ls -A /etc/rspamd/local.d/dkim)" ]; then
    echo "Warning! No dkim configuration found" 1>&2
  fi
  systemctl enable --now archmailbox-nftables
  systemctl enable --now rspamd.socket
  systemctl enable --now kresd.socket
  systemctl enable --now pyrelay-rspamd
  systemctl enable --now dovecot
  systemctl enable --now smtpd
}

_disable_services() {
  _check_is_root yes
  echo "Stopping archmailbox services..."
  systemctl disable --now archmailbox-nftables
  systemctl disable --now rspamd.socket
  systemctl stop rspamd.service
  systemctl disable --now kresd.socket
  systemctl stop kresd@*.service
  systemctl disable --now pyrelay-rspamd
  systemctl disable --now dovecot
  systemctl disable --now smtpd
}

_usage() {
  _script="$(basename "$0")"
  cat <<EOF
usage: $_script [-h] [-f filename] [-p password]
	[-m modules] [-d domain] <command>
commands:
	backupconfig: backup selected modules
	restoreconfig: restore selected modules
	gendkim: generate dkim configuration for domain
	installdkim: install dkim configuration
	gencert: generate Let's Encrypt certificate
	deploycert: deploy certificate after restore
	enable: start and enable all services
	disable: stop and disable all services
modules:
	$AVAIL_MODULES
	if no modules specified, default to all
EOF
}

while getopts 'hf:p:m:d:' flag; do
  case $flag in
    f) FILENAME=$OPTARG ;;
    p) PASSWORD=$OPTARG ;;
    m) MODULES=$OPTARG ;;
    d) DOMAIN=$OPTARG ;;
    h)
      _usage
      exit 0
      ;;
    *) _die "Invalid option" usage ;;
  esac
done

shift $((OPTIND - 1))

umask 077
_create_temp_dir
case $1 in
  backupconfig) _backup_modules "$MODULES" ;;
  restoreconfig) _restore_modules "$MODULES" ;;
  gendkim) _generate_dkim ;;
  installdkim) _install_dkim ;;
  gencert) _gen_acme_certificate ;;
  deploycert) _deploy_certificate ;;
  enable) _enable_services ;;
  disable) _disable_services ;;
  *) _die "Unrecognized command $1" usage ;;
esac

# vim: et:sw=2:ts=2
