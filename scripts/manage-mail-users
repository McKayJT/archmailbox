#!/bin/bash

if [ -z "$SMTPD_DIRECTORY" ]; then
  SMTPD_DIRECTORY='/etc/smtpd'
fi

if [ -z "$SQL_FILE" ]; then
  SQL_FILE='smtp.sqlite'
fi

SQL_DB_PATH="$SMTPD_DIRECTORY/$SQL_FILE"

# run sql query, preventing bobby tables from being a problem
_run_sql() {
  if [ "$#" -lt 2 ]; then
    if ! echo "$1" | sqlite3 "$SQL_DB_PATH"; then
      echo "database query fails" 1>&2
      exit 1
    fi
  else
    _query=$1
    declare -a _args
    shift
    for _el in "$@"; do
      _args+=("${_el//\'/\'\'}")
    done
    # shellcheck disable=SC2059
    if ! printf "$_query" "${_args[@]}" | sqlite3 "$SQL_DB_PATH"; then
      echo "database query fails" 1>&2
      exit 1
    fi
  fi
}

_check_valid_db() {
  if [ ! -r "$SQL_DB_PATH" ]; then
    echo "Could not read database at $SQL_DB_PATH"
    return 1
  fi

  _run_sql '.dbinfo' >/dev/null

  if [ -z "$(_run_sql '.schema virtuals')" ]; then
    echo "Database does not contain table virtuals!"
    return 1
  fi

  if [ -z "$(_run_sql '.schema domains')" ]; then
    echo "Database does not contain table domains!"
    return 1
  fi

  if [ -z "$(_run_sql '.schema credentials')" ]; then
    echo "Database does not contain table credentials!"
    return 1
  fi
}

_check_user_exists() {
  _user_count=$(_run_sql "Select count(*) from credentials where email = '%s'" \
    "$USERNAME")

  if [ "$_user_count" -gt 0 ]; then
    return 0
  fi

  return 1
}

_check_domain_exists() {
  _domain_count=$(_run_sql "Select count(*) from domains where domain = '%s'" \
    "$DOMAIN")

  if [ "$_domain_count" -gt 0 ]; then
    return 0
  fi

  return 1
}

_create_db() {
  echo "Creating database '$SQL_DB_PATH'"
  if [ -r "$SQL_DB_PATH" ]; then
    echo "Database $SQL_DB_PATH already exists!"
    return 1
  fi

  printf '%s' 'Who will be postmaster? '
  read -r POSTMASTER

  if [ -z "$POSTMASTER" ]; then
    echo 'You must have a postmaster!'
    return 1
  fi

  cat <<EOF |
BEGIN TRANSACTION;
CREATE TABLE virtuals (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    email VARCHAR(255) NOT NULL,
    destination VARCHAR(255) NOT NULL
);
CREATE TABLE credentials (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL
);
CREATE TABLE tree_keys (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user int NOT NULL,
    enabled int NOT NULL DEFAULT 1,
    version int NOT NULL DEFAULT 1,
    public_key VARCHAR(255) NOT NULL,
    pwhash_algo int NOT NULL DEFAULT 1,
    pwhash_opslimit int NOT NULL DEFAULT 2,
    pwhash_memlimit int NOT NULL DEFAULT 67108864,
    nonce vachar(255) NOT NULL,
    salt vachar(255) NOT NULL,
    locked_box varchar(255) NOT NULL
);
CREATE TABLE domains (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    domain VARCHAR(255) NOT NULL
);
INSERT INTO virtuals (email, destination) VALUES('abuse','postmaster');
INSERT INTO virtuals (email, destination) VALUES('security','postmaster');
INSERT INTO virtuals (email, destination) VALUES('hostmaster','postmaster');
INSERT INTO virtuals (email, destination) VALUES('webmaster','postmaster');
INSERT INTO virtuals (email, destination) VALUES('dmarcreports','postmaster');
INSERT INTO virtuals (email, destination) VALUES('postmaster','$POSTMASTER');
COMMIT;
EOF
    sqlite3 "$SQL_DB_PATH"
}

_get_password() {
  while [ -z "$PASSWORD" ]; do
    printf '%s' "Password: "
    stty -echo
    read -r PASSWORD
    stty echo
    printf '\n'
  done

  PWHASH=$(printf '%s' "$PASSWORD" | /usr/lib/smtpd/opensmtpd/encrypt)
}

_get_username() {
  while [ -z "$USERNAME" ]; do
    printf '%s' "Username: "
    read -r USERNAME
  done

  USERNAME=$(printf '%s' "$USERNAME" | tr '[:upper:]' '[:lower:]')
}

_get_domain() {
  while [ -z "$DOMAIN" ]; do
    printf '%s' "Domain: "
    read -r DOMAIN
  done

  DOMAIN=$(printf '%s' "$DOMAIN" | tr '[:upper:]' '[:lower:]')
}

_add_user() {
  if ! _check_valid_db; then
    exit 1
  fi

  echo "Adding user to database '$SQL_DB_PATH'"

  _get_username

  if _check_user_exists; then
    echo "User '$USERNAME' already exists!"
    exit 1
  fi

  _get_password

  printf "Adding user '%s' with password hash '%s'\n" "$USERNAME" "$PWHASH"

  _run_sql "INSERT INTO credentials (email, password) VALUES ('%s', '%s');" \
    "$USERNAME" "$PWHASH"
  _run_sql "INSERT INTO virtuals (email, destination) VALUES ('%s', 'vmail');" \
    "$USERNAME"
  # add trees data
  _userid="$(_run_sql "SELECT id FROM credentials WHERE email = '%s'" \
    "$USERNAME")"
  mapfile -d "" _trees < <(echo -n "$PASSWORD" | treesutil -c)
  if [ "${#_trees[@]}" -ne 4 ]; then
    echo "Error creating trees data"
    return 1
  fi
  #echo -e "pkey: ${_trees[0]}\nsalt: ${_trees[1]}\nnonce: ${_trees[2]}\nlocked: ${_trees[3]}"
  _run_sql "INSERT INTO tree_keys (user, public_key, salt, nonce, locked_box) VALUES('%s', '%s', '%s', '%s', '%s')" \
    "$_userid" "${_trees[0]}" "${_trees[1]}" "${_trees[2]}" "${_trees[3]}"
}

_update_password() {
  if ! _check_valid_db; then
    exit 1
  fi

  echo "Updating password in database '$SQL_DB_PATH'"

  _get_username

  if ! _check_user_exists; then
    echo "'$USERNAME' does not exist in the database"
    return 1
  fi

  _get_password

  _userid="$(_run_sql "SELECT id FROM credentials WHERE email = '%s'" "$USERNAME")"
  mapfile -td '|' _trees \
    < <(_run_sql "SELECT public_key, salt, nonce, locked_box FROM tree_keys where user = '%s'" \
      "$_userid")

  while [ -z "$OLDPW" ]; do
    read -rs -p "Enter old password: " OLDPW
    printf '\n'
    mapfile -d "" _newtrees < <(printf '%s\0%s\0%s\0%s\0%s\0%s\0' \
      "${_trees[0]}" "${_trees[1]}" "${_trees[2]}" "${_trees[3]//[$'\n']/}" \
      "$OLDPW" "$PASSWORD" | treesutil -p)
    if [ "${#_newtrees[@]}" -ne 4 ]; then
      echo "Wrong old password"
      OLDPW=
    fi
  done

  _run_sql "UPDATE credentials SET password='%s' WHERE email='%s'" \
    "$PWHASH" "$USERNAME"
  _run_sql "UPDATE tree_keys SET salt='%s', nonce='%s', locked_box='%s' WHERE user = '%s'" \
    "${_newtrees[1]}" "${_newtrees[2]}" "${_newtrees[3]}" "$_userid"
}

_confirm_delete() {
  while true; do
    printf "Are you sure you want to delete '%s'? [y/N] " "$1"
    read -r yn
    case $yn in
    y) break ;;
    Y) break ;;
    n) exit 0 ;;
    N) exit 0 ;;
    '') exit 0 ;;
    *) echo 'Please choose y or n' ;;
    esac
  done
}

_delete_user() {
  if ! _check_valid_db; then
    exit 1
  fi

  echo "Deleting user from database '$SQL_DB_PATH'"
  _get_username

  if ! _check_user_exists; then
    echo "'$USERNAME' does not exist in the database"
    return 1
  fi

  _confirm_delete "$USERNAME"

  _userid="$(_run_sql "SELECT id FROM credentials WHERE email = '%s'" "$USERNAME")"
  _run_sql "DELETE FROM credentials where email = '%s'" "$USERNAME"
  _run_sql "DELETE FROM virtuals where email = '%s'" "$USERNAME"
  _run_sql "DELETE FROM tree_keys where user = '%s'" "$_userid"
  echo "'$USERNAME' removed from database, but mail folders have not been removed"
  exit 0
}

_list_users() {
  if ! _check_valid_db; then
    exit 1
  fi

  _run_sql "SELECT email FROM credentials"
}

_add_virtual() {
  if ! _check_valid_db; then
    exit 1
  fi

  echo "Adding virtual domain to database '$SQL_DB_PATH'"

  _get_domain

  if _check_domain_exists; then
    echo "Domain '$DOMAIN' already exists!"
    exit 1
  fi

  _run_sql "INSERT INTO domains (domain) VALUES ('%s');" "$DOMAIN"
}

_delete_virtual() {
  if ! _check_valid_db; then
    exit 1
  fi

  echo "Deleting virtual domain from database '$SQL_DB_PATH'"
  _get_domain

  if ! _check_domain_exists; then
    echo "'$DOMAIN' does not exist in the database"
    return 1
  fi

  _confirm_delete "$DOMAIN"

  _run_sql "DELETE FROM domains WHERE domain = '%s'" "$DOMAIN"
  exit 0
}

_list_virtuals() {
  if ! _check_valid_db; then
    exit 1
  fi

  _run_sql "SELECT domain FROM domains"
}

_usage() {
  _name=$(basename "$0")
  cat <<EOF
usage: $_name [-f database] [-u username] [-p password] [-d domain] <command>

commands:
	create: create a new database
	add: add a new user
	delete: delete user
	password: update user password
	list: list users
	addvirtual: add virtual domain
	delvirtual: delete virtual domain
	listvirtual: list virtual domains
EOF
}

while getopts 'f:u:p:d:' c; do
  case $c in
  f) SQL_DB_PATH="$OPTARG" ;;
  u) USERNAME="$OPTARG" ;;
  p) PASSWORD="$OPTARG" ;;
  d) DOMAIN="$OPTARG" ;;
  *)
    _usage
    exit 1
    ;;
  esac
done
shift $((OPTIND - 1))

case $1 in
create)
  _create_db
  ;;
add)
  _add_user
  ;;
addvirtual)
  _add_virtual
  ;;
delete)
  _delete_user
  ;;
delvirtual)
  _delete_virtual
  ;;
password)
  _update_password
  ;;
list)
  _list_users
  ;;
listvirtual)
  _list_virtuals
  ;;
*)
  echo "No command specified"
  _usage
  exit 1
  ;;
esac

# vim: et:ts=2:sw=2
